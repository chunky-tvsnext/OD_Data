const mongoose = require('mongoose');

const LogSchema = mongoose.Schema({
    EQCycle: Number, 
    SOC: Number, 
    SOH: Number, 
    batteryStatus: Number, 
    binNumber: String, 
    buildNo: Number, 
    configVersion: Number, 
    current: Number, 
    device: Number, 
    driver: Number, 
    fwVersion: String, 
    maxCellTemp: Number, 
    maxCellVoltage: Number, 
    minCellTemp: Number, 
    minCellVoltage: Number, 
    batteryLog_time: Date, 
    totalChargeCapacity: Number, 
    totalCycleCapacity: Number, 
    totalDisChargeCapacity: Number, 
    vehicle: Number,
    battery: Number, 
    bin: String, 
    deviceBatteryVoltage: Number, 
    distanceTravelled: Number, 
    gprsAvailable: Boolean, 
    gpsAvailable: Boolean, 
    haltedSecs: Number, 
    hardwareV: Number, 
    heading: Number, 
    ignitionStatus: Boolean, 
    lat: Number, 
    lng: Number, 
    mainPowerStatus: Boolean, 
    movingSecs: Number, 
    odometer: Number, 
    recordType: Number, 
    softwareV: String, 
    speed: Number, 
    locationLog_time: Date, 
    // vehicle: Number, 
    vehicleBatteryVoltage: Number, 
    vehicleStatus: Number, 
    x: Number, 
    y: Number, 
    z: Number,
    imeiNo : Number
}, {
    timestamps: true
});

module.exports = mongoose.model('Log', LogSchema);

exports.logsDetailModel = {
    TCU_FW_version: String,
    BMS_Build_Number: String,
    BMS_Config_Version: String,
    BMS_Date_IST: String,
    BMS_Date: String,
    BMS_Time: String,
    gps_data_valid_status: String,
    latitude: String,
    longitude: String,
    SoC: String,
    SoH: String,
    SoP: String,
    battery_status: String,
    cycle_capacity: String,
    current: String,
    equivalent_cycle: String,
    maximum_cell_voltage: String,
    minimum_cell_volatage: String,
    number_of_cells:String,
    cell_voltages: String,
    maximum_cell_temperature: String,
    minimum_cell_temperature: String,
    pdu_temperature: String,
    board_temperature: String,
    number_of_temperature_sensors: String,
    cell_temperatures: String,
    errors: String,
    warnings: String,
    events: String,
    network_information: String,
    network_mode: String,
    aging_debug_info_advance: String,
    aging_debug_info_impede: String,
    internal_running_state: String,
    blive: String,
    ID: String,
    sequene_number:String,
    TCU_AccX: String,
    TCU_AccY: String,
    TCU_AccZ: String,
    sender_ID: String,
    BIN: String,
    server_date: String
}


// EQCycle: String, 
// SOC: String, 
// SOH: String, 
// batteryStatus: String, 
// binNumber: String, 
// buildNo: String, 
// configVersion: String, 
// current: String, 
// device: String, 
// driver: String, 
// fwVersion: String, 
// maxCellTemp: String, 
// maxCellVoltage: String, 
// minCellTemp: String, 
// minCellVoltage: String, 
// batteryLog_time: String, 
// totalChargeCapacity: String, 
// totalCycleCapacity: String, 
// totalDisChargeCapacity: String, 
// vehicle: String,
// battery: String, 
// bin: String, 
// deviceBatteryVoltage: String, 
// distanceTravelled: String, 
// gprsAvailable: String, 
// gpsAvailable: String, 
// haltedSecs: String, 
// hardwareV: String, 
// heading: String, 
// ignitionStatus: String, 
// lat: String, 
// lng: String, 
// mainPowerStatus: String, 
// movingSecs: String, 
// odometer: String, 
// recordType: String, 
// softwareV: String, 
// speed: String, 
// locationLog_time: String, 
// // vehicle: String, 
// vehicleBatteryVoltage: String, 
// vehicleStatus: String, 
// x: String, 
// y: String, 
// z: String,